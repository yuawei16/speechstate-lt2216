{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","sayAppointment","context","thresHold","targetState","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","entry","assign","counter","RECOGNISED","target","actions","userName","recResult","utterance","cond","confidence","TIMEOUT","prompt","ENDSPEECH","ask","nomatch","clarify","hist","history","openning","meetingCelebrity","id","famousPersonName","findPerson","getPerson","invoke","src","fetch","Request","then","data","json","onDone","personSpec","event","Abstract","console","log","onError","success","split","slice","fail","meetingFamousPerson","meetingWelcome","date","undefined","daypart","gettime","meetingConfirmationPartDay","meetingConfirmationWholeDay","finalConfirmation","info","alone","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","RECSTOP","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.183dfafe.chunk.js","sourcesContent":["/*\n    Refine DM so that it can:\n        1. Switch to Idle when prompt is repeated 3 times\n        2. When \"Help\" is given, DM switches to previous state\n        3. When the confidence is over 0.6, DM will use it. Otherwise, a prompt is given and ask again.\n*/\n\nimport { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    \"On Friday.\": { day: \"Friday\" },\n    \"At 10\": { time: \"10:00\" },\n}\n\nconst sayAppointment: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Do you want to create a meeting titled ${context.title} on ${context.day}`\n}))\n\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\n\nconst thresHold = 0.6\n\n\nfunction meetingWithOther(targetState: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return {\n        id: 'meetingWithOther',\n        entry: assign({counter: (context) => context.counter = 0}),\n        initial: 'prompt',\n        on: {\n            RECOGNISED: [\n                {\n                    target: '.findPerson',\n                    actions: assign({ famousPersonName: (context) => context.recResult[0].utterance }),\n                    cond: (context) => context.recResult[0].confidence > thresHold\n                },\n                {\n                    target: '.clarify',\n                },\n                {\n                    target: 'openning.hist',\n                    cond: (context) => context.recResult[0].utterance === 'Help.',              \n                },\n                {\n                    target: '.nomatch'\n                }\n            ],\n            TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                      {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n        },\n        states: {\n            prompt: {\n                entry: [say(\"Who is X?\"), assign({counter: (context) => context.counter+1})],\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n            clarify:{\n                entry: send((context: SDSContext) => ({\n                    type: \"SPEAK\", value: `Sorry, I am not sure about ${context.recResult[0].utterance}. \n                                          Please repeat.`})),\n                on: {ENDSPEECH: 'ask'}\n            },\n            nomatch: {\n                entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                on: { ENDSPEECH: 'ask' }\n            },  \n\n            findPerson: {  \n                id: 'findPerson',\n                initial: 'prompt',\n                states: {\n                    prompt: {\n                        entry: say(\"Let me check.\"),\n                        on: { ENDSPEECH: 'getPerson' }\n                    },\n                    getPerson: {\n                        invoke: {\n                            id: 'getPerson',\n                            src: (context) => kbRequest(context.famousPersonName),\n                            onDone: {\n                                target: 'success',\n                                actions: [\n                                    assign({ personSpec: (context, event) => event.data.Abstract}),\n                                    (context, event) => console.log(context, event),\n                                    (grammar) => console.log(grammar.personSpec)\n                                ]\n                            },\n                            onError: {\n                                target: 'fail',\n                                actions: (context, event) => console.log(context, event)\n                            }\n                        }\n                    },\n                    success: {\n                        entry: send((context: SDSContext) => ({\n                            // Only the first 2 descriptions are taken here to save time.\n                            type: \"SPEAK\", value: context.personSpec.split('.').slice(0,1)\n                        })),\n                        on: { ENDSPEECH: '#meetingWithOther.meetingFamousPerson' }\n                    },\n                    fail: {},\n                    hist: {\n                        type: 'history',\n                        history: 'deep'\n                    }\n                }\n            },\n            meetingFamousPerson:{\n                id: 'meetingFamousPerson',\n                entry: assign({counter: (context) => context.counter = 0}),\n                initial: 'prompt',\n                on: {\n                    RECOGNISED: [\n                        {\n                            target: targetState,\n                            cond: (context) => context.recResult[0].utterance === 'Yes.',\n                            actions: [assign({ title: (context) => \"meeting with\" + context.famousPersonName} ),\n                                        (context) => console.log(context.title)]\n    \n                        },\n                        {\n                            target: '#findPerson.hist',\n                            cond: (context) => context.recResult[0].utterance === 'Help.',              \n                        },\n                        {\n                            target: '.nomatch'\n                        }\n                    ],\n                    TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                              {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n                },\n                states: {\n                    prompt: {\n                        entry: [send((context: SDSContext) => ({type: \"SPEAK\", value: `Do you want to meet ${context.famousPersonName}?`})),\n                                assign({counter: (context) => context.counter+1})],\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    ask: {\n                        entry: send('LISTEN'),\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    hist: {\n                        type: 'history',\n                        history: 'deep'\n                    }\n                }\n            },\n            hist: {\n                type: 'history',\n                history: 'deep'\n            }        \n        }   \n    }\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {          \n            on: {            \n                TTS_READY: 'welcome',\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            entry: assign({counter: (context) => context.counter = 0}),\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'openning',\n                        actions: assign({ userName: (context) => context.recResult[0].utterance}),\n                        cond: (context) => context.recResult[0].confidence > thresHold\n                    },\n                    {\n                        target: '.clarify',\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                          {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n            },\n            states: {\n                prompt: {\n                    entry: [say(\"Welcome! Tell me your name please.\"), \n                            assign({counter: (context) => context.counter+1})],\n                    on: { ENDSPEECH: 'ask'}\n                    \n                },\n                ask: {\n                    entry: send('LISTEN')\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                clarify:{\n                    entry: send((context: SDSContext) => ({\n                        type: \"SPEAK\", value: `Sorry, I am not sure about ${context.recResult[0].utterance}. \n                                              Please repeat.`})),\n                    on: {ENDSPEECH: 'ask'}\n                },\n                hist: {\n                    type: 'history',\n                    history: 'deep'\n                }\n               \n            }\n        },\n        openning: {\n            initial: 'prompt',\n            entry: assign({counter: (context) => context.counter = 0}),\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'Alone.' && \n                                           context.recResult[0].confidence > 0.5    // Loose the confidece because it is hard to get value over 0.6 for this word.\n                              \n\n                    },\n                    {\n                        target: 'meetingCelebrity',\n                        cond: (context) => context.recResult[0].utterance === 'Another one.' &&\n                                            context.recResult[0].confidence > thresHold\n                    },\n                    {\n                        target: 'welcome.hist',\n                        cond: (context) => context.recResult[0].utterance === 'Help.',\n                    },\n                    {\n                        target: '.clarify',\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                          {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n            },\n            states: {\n                prompt: {\n                    entry: [send((context: SDSContext) => ({type: \"SPEAK\", value: `Hi, ${context.userName}! \n                                                           Need help? Just say help! Do you want to create a meeting alone or with another one?`})),\n                            assign({counter: (context) => context.counter+1})],\n\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                clarify:{\n                    entry: send((context: SDSContext) => ({\n                        type: \"SPEAK\", value: `Sorry, I am not sure about ${context.recResult[0].utterance}. \n                                              Please repeat.`})),\n                    on: {ENDSPEECH: 'ask'}\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                hist: {\n                    type: 'history',\n                    history: 'deep'\n                },\n            }\n        },\n        meetingCelebrity: {\n            ...meetingWithOther('#root.dm.date')\n        },\n        meetingWelcome: {\n            initial: 'prompt',\n            entry: assign({counter: (context) => context.counter = 0}),\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'date',\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}) &&\n                                           context.recResult[0].confidence > thresHold,\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\n                    },\n                    {\n                        target: '.clarify',\n                    },\n                    {\n                        target: '#root.dm.openning.hist',\n                        cond: (context) => context.recResult[0].utterance === 'Help.',              \n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                          {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n            },\n            states: {\n                prompt: {\n                    entry: [say(\"Let's create a meeting. What is it about?\"),\n                            assign({counter: (context) => context.counter+1})],\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                clarify:{\n                    entry: send((context: SDSContext) => ({\n                        type: \"SPEAK\", value: `Sorry, I am not sure about ${context.recResult[0].utterance}. \n                                              Please repeat.`})),\n                    on: {ENDSPEECH: 'ask'}\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                hist: {\n                    type: 'history',\n                    history: 'deep'\n                },\n            }\n        },\n        date:{\n            initial: 'prompt',\n            entry: assign({counter: (context) => context.counter = 0}),\n            on: {\n                RECOGNISED: [\n                    // Take the date in the grammar\n                    {\n                        target: 'daypart',\n                        cond: (context) => grammar[context.recResult[0].utterance] !== undefined &&\n                                           context.recResult[0].confidence > thresHold,\n                        actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })  \n                    },\n                    // If the date is not in the garmmar, save the date to context\n                    {\n                        target: 'daypart',\n                        cond: (context) => grammar[context.recResult[0].utterance] === undefined &&\n                                                   context.recResult[0].confidence > thresHold &&\n                                                   context.recResult[0].utterance !== \"Help.\",\n                        actions: [assign({ day: (context) => {let dayStr = context.recResult[0].utterance;\n                                                              let newStr = dayStr.split(' ')[1];\n                                                            return newStr}}),\n                                        (context) => console.log(\"Date Step 252\", context)]\n                        \n                    },\n                    {\n                        target: '#root.dm.meetingCelebrity.hist',\n                        cond: (context) => context.recResult[0].utterance === 'Help.' && context.famousPersonName !== undefined        \n                    },\n                    {\n                        target: '#root.dm.meetingWelcome.hist',\n                        cond: (context) => context.recResult[0].utterance === 'Help.' && context.famousPersonName === undefined        \n                    },\n                    {\n                        target: '.clarify',\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                          {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n            },\n            states: {\n                prompt: {\n                    entry: [say(\"On which day is it?\"),\n                            assign({counter: (context) => context.counter+1})],\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                clarify:{\n                    entry: send((context: SDSContext) => ({\n                        type: \"SPEAK\", value: `Sorry, I am not sure about ${context.recResult[0].utterance}. \n                                              Please repeat.`})),\n                    on: {ENDSPEECH: 'ask'}\n                    },\n                hist: {\n                    type: 'history',\n                    history: 'deep'\n                },\n            }\n        },\n        daypart:{\n            initial: 'prompt',\n            entry: assign({counter: (context) => context.counter = 0}),\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'gettime',\n                        cond: (context) => context.recResult[0].utterance === 'No.' \n                    },\n                    {\n                        target: 'meetingConfirmationWholeDay',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.'\n                    },\n                    {\n                        target: '#root.dm.date.hist',\n                        cond: (context) => context.recResult[0].utterance === 'Help.'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                          {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n            },\n            states: {\n                prompt: {\n                    entry: [say(\"Will it take the whole day?\"),\n                            assign({counter: (context) => context.counter+1})],    \n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                hist: {\n                    type: 'history',\n                    history: 'deep'\n                }\n            }\n        },\n        gettime: {\n            initial: 'prompt',\n            entry: assign({counter: (context) => context.counter = 0}),   \n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingConfirmationPartDay',\n                        cond: (context) => context.recResult[0].utterance !== 'Help.' &&\n                                           context.recResult[0].confidence > thresHold,\n                        actions: [assign({ title: (context) => grammar[context.recResult[0].utterance].time! }),\n                                  (grammar) => console.log(grammar)]\n                    },\n                    {\n                        target: '#root.dm.daypart.hist',\n                        cond: (context) => context.recResult[0].utterance === 'Help.',              \n                    },\n                    {\n                        target: '.clarify',\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                          {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n            },\n            states: {\n                prompt: {\n                    entry: [say(\"What time is your meeting?\"),\n                            assign({counter: (context) => context.counter+1})], \n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                clarify:{\n                    entry: send((context: SDSContext) => ({\n                        type: \"SPEAK\", value: `Sorry, I am not sure about ${context.recResult[0].utterance}. \n                                              Please repeat.`})),\n                    on: {ENDSPEECH: 'ask'}\n                },\n                hist: {\n                    type: 'history',\n                    history: 'deep'\n                }\n            }\n        },\n        meetingConfirmationPartDay: {\n            initial: 'prompt',\n            entry: assign({counter: (context) => context.counter = 0}),\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'No.'\n                    },\n                    {\n                        target: 'finalConfirmation',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.'\n                    },\n                    {\n                        target: '#root.dm.daypart.hist',\n                        cond: (context) => context.recResult[0].utterance === 'Help.',              \n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                          {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n            },\n            states: {\n                prompt: {\n                    entry: [say(\"Do you want to create a meeting titled \" + grammar[\"Lunch.\"].title\n                               + \"on \" + grammar[\"On Friday.\"].day + \"at \" + grammar[\"At 10\"].time + \"?\"),\n                               assign({counter: (context) => context.counter+1})],\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                hist: {\n                    type: 'history'\n                }\n            }\n        },\n        meetingConfirmationWholeDay: {\n            initial: 'prompt',\n            entry: assign({counter: (context) => context.counter = 0}),\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'No.'\n                    },\n                    {\n                        target: 'finalConfirmation',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.',\n                    },\n                    {\n                        target: '#root.dm.daypart.hist',\n                        cond: (context) => context.recResult[0].utterance === 'Help.',              \n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter < 3},\n                          {target: '#root.dm.init', cond: (context) => context.counter > 3}]\n            },\n            states: {\n                prompt: {\n                    entry: [sayAppointment,\n                            assign({counter: (context) => context.counter+1})],\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                hist: {\n                    type: 'history'\n                }\n            }\n        },\n        finalConfirmation: {\n            entry: say(\"Your meeting has been created!\")\n        },\n        info: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `OK, ${context.title}`\n            })),\n            on: { ENDSPEECH: 'init' }\n        },\n        hist: {\n            type: 'history',\n            history: 'deep'\n        },\n        alone: {}\n    }\n})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointmentPlus\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 3\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause',\n                        RECSTOP: 'idle'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}