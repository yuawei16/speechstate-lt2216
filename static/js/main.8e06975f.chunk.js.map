{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","userName","famousPersonName","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","RECOGNISED","target","actions","assign","context","recResult","utterance","TIMEOUT","prompt","entry","ENDSPEECH","ask","nomatch","openning","cond","meetingWithOther","console","log","findPerson","getPerson","invoke","id","src","fetch","Request","then","data","json","onDone","personSpec","event","Abstract","onError","success","fail","meetingFamousPerson","meetingWelcome","date","daypart","gettime","meetingConfirmationPartDay","meetingConfirmationWholeDay","finalConfirmation","info","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"+XAUA,SAASA,EAAIC,GACT,OAAOC,aAAK,SAACC,GAAD,MAA2B,CAAEC,KAAM,QAASC,MAAOJ,MAGnE,IAAMK,EAA6H,CAC/H,WAAY,CAAEC,MAAO,4BACrB,SAAU,CAAEA,MAAO,wBACnB,OAAU,CAAEC,IAAK,UACjB,QAAS,CAAEC,KAAM,SACjB,KAAQ,CAACC,SAAU,QACnB,aAAgB,CAACC,iBAAkB,gBAO1BC,EAAuD,CAChEC,QAAS,OACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,SAGfC,KAAM,CACFF,GAAI,CACAG,UAAW,UACXF,MAAO,YAGfG,QAAS,CACLP,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,WACRC,QAASC,YAAO,CAAEjB,MAAO,SAACkB,GAAD,OAAanB,EAAQmB,EAAQC,UAAU,GAAGC,WAAWjB,aAElF,CACIY,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,qBACXgB,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7BG,SAAU,CACNrB,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,iBACRa,KAAM,SAACV,GAAD,MAAgD,WAAnCA,EAAQC,UAAU,GAAGC,YAE5C,CACIL,OAAQ,mBACRa,KAAM,SAACV,GAAD,MAAgD,YAAnCA,EAAQC,UAAU,GAAGC,YAE5C,CACIL,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,MAAQM,EAAO,KAASI,SAAW,8DAC9CM,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7BK,iBAAkB,CACdvB,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,aACRC,QAAS,CAACC,YAAO,CAAEb,iBAAkB,SAACc,GAAD,OAAanB,EAAO,aAAiBK,oBAC9D,SAACc,GAAD,OAAaY,QAAQC,IAAIb,EAAQd,qBAEjD,CACIW,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,aACXgB,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAK7BQ,WAAY,CACR1B,QAAS,SACTC,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,eACXgB,GAAI,CAAEe,UAAW,cAErBS,UAAW,CACPC,OAAQ,CACJC,GAAI,YACJC,IAAK,SAACrC,GAAD,OArHVL,EAqHiCK,EAAQK,iBApHxDiC,MAAM,IAAIC,QAAJ,4DAAiE5C,EAAjE,kCAAsG6C,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UADhH,IAAC/C,GAsHKgD,OAAQ,CACJ3B,OAAQ,UACRC,QAAS,CACLC,YAAO,CAAE0B,WAAY,SAACzB,EAAS0B,GAAV,OAAoBA,EAAMJ,KAAKK,YACpD,SAAC3B,EAAS0B,GAAV,OAAoBd,QAAQC,IAAIb,EAAS0B,IACzC,SAAC7C,GAAD,OAAa+B,QAAQC,IAAIhC,EAAQ4C,eAGzCG,QAAS,CACL/B,OAAQ,OACRC,QAAS,SAACE,EAAS0B,GAAV,OAAoBd,QAAQC,IAAIb,EAAS0B,OAI9DG,QAAS,CACLxB,MAAO5B,aAAK,SAACuB,GAAD,MAA0B,CAClCrB,KAAM,QAASC,MAAOoB,EAAQyB,eAElClC,GAAI,CAAEe,UAAW,iCAErBwB,KAAM,KAGdC,oBAAoB,CAChB3C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,OACRa,KAAM,SAACV,GAAD,MAAgD,SAAnCA,EAAQC,UAAU,GAAGC,YAG5C,CACIL,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,sBAAwBM,EAAQK,kBAC3CK,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7B0B,eAAgB,CACZ5C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,OACRa,KAAM,SAACV,GAAD,MAAa,UAAYnB,EAAQmB,EAAQC,UAAU,GAAGC,YAAc,KAC1EJ,QAASC,YAAO,CAAEjB,MAAO,SAACkB,GAAD,OAAanB,EAAQmB,EAAQC,UAAU,GAAGC,WAAWpB,UAElF,CACIe,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,6CACXgB,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7B2B,KAAK,CACD7C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,UAERC,QAAS,CAACC,YAAO,CAAEjB,MAAO,SAACkB,GAAD,OAAanB,EAAQmB,EAAQC,UAAU,GAAGC,WAAWnB,OACvE,SAACF,GAAD,OAAa+B,QAAQC,IAAIhC,MAErC,CACIgB,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,uBACXgB,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7B4B,QAAQ,CACJ9C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,UACRa,KAAM,SAACV,GAAD,MAAgD,QAAnCA,EAAQC,UAAU,GAAGC,YAE5C,CACIL,OAAQ,8BACRa,KAAM,SAACV,GAAD,MAAgD,SAAnCA,EAAQC,UAAU,GAAGC,YAE5C,CACIL,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,+BACXgB,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7B6B,QAAS,CACL/C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,6BAERC,QAAS,CAACC,YAAO,CAAEjB,MAAO,SAACkB,GAAD,OAAanB,EAAQmB,EAAQC,UAAU,GAAGC,WAAWlB,QACrE,SAACH,GAAD,OAAa+B,QAAQC,IAAIhC,MAEvC,CACIgB,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,8BACXgB,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7B8B,2BAA4B,CACxBhD,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,qBAIZ,CACIA,OAAQ,iBACRa,KAAM,SAACV,GAAD,MAAgD,QAAnCA,EAAQC,UAAU,GAAGC,YAE5C,CACIL,OAAQ,oBACRa,KAAM,SAACV,GAAD,MAAgD,SAAnCA,EAAQC,UAAU,GAAGC,YAE5C,CACIL,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,yCAA2CM,EAAQ,UAAUC,MAAQ,KAAOD,EAAO,OAAWE,IAAM,KAAOF,EAAQ,SAASG,KAAO,KAC9IO,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7B+B,4BAA6B,CACzBjD,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,qBAIZ,CACIA,OAAQ,iBACRa,KAAM,SAACV,GAAD,MAAgD,QAAnCA,EAAQC,UAAU,GAAGC,YAE5C,CACIL,OAAQ,oBACRa,KAAM,SAACV,GAAD,MAAgD,SAAnCA,EAAQC,UAAU,GAAGC,YAE5C,CACIL,OAAQ,aAGhBM,QAAS,WAEbd,OAAQ,CACJe,OAAQ,CACJC,MAAO9B,EAAI,yCAA2CM,EAAQ,UAAUC,MAAQ,KAAOD,EAAO,OAAWE,IAAM,KAC/GQ,GAAI,CAAEe,UAAW,QAErBC,IAAK,CACDF,MAAO5B,YAAK,WAEhB+B,QAAS,CACLH,MAAO9B,EAAI,6DACXgB,GAAI,CAAEe,UAAW,UAI7BgC,kBAAmB,CACfjC,MAAO9B,EAAI,mCAEfgE,KAAM,CACFlC,MAAO5B,aAAK,SAACuB,GAAD,MAAc,CACtBrB,KAAM,QACNC,MAAM,OAAD,OAASoB,EAAQlB,WAE1BS,GAAI,CAAEe,UAAW,W,4CCjYrB7B,EAAiBqB,IAAjBrB,KAAM+D,EAAW1C,IAAX0C,OAGRC,EAAS,cAEfC,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAIZ,IAEMC,EAAUC,YAAmC,CAC/C7B,GAAI,OACJtC,KAAM,WACNU,OAAQ,CACJ0D,GAAG,eACI5D,GAGP6D,OAAQ,CACJ5D,QAAS,OACTC,OAAQ,CACJI,KAAM,CACFF,GAAI,CACAC,MAAO,CACHK,OAAQ,WACRC,QAAS,CACLC,YAAO,CACHkD,SAAU,SAACC,GAAD,OACN,IAAMC,OAAeC,cAAiBD,OAAeE,uBAE7D,SAACrD,GAAD,OACIsD,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IACxCpC,MAAK,SAASqC,GAAU1D,EAAQiD,SAASU,wBAAwBD,WAK1FE,SAAU,CACN5C,OAAQ,CACJC,GAAI,wBACJC,IAAK,SAACgC,EAAMW,GAAP,OAAgBC,KACrBtC,OAAQ,CACJ1B,QAAS,CACLC,aAAO,SAACrB,EAAUgD,GAAY,MAAO,CAAEqC,wBAAyBrC,EAAMJ,SACtE,eACJzB,OAAQ,eAEZ+B,QAAS,CACL/B,OAAQ,UAIpBmE,YAAa,CACThD,OAAQ,CACJC,GAAI,UACJC,IAAK,SAAClB,EAASiE,GAAV,OAAqB,SAACC,EAAUC,GACjC,IAAMC,EAAWC,IAA8B,CAC3CC,aAActE,EAAQiD,SACtBsB,YAAa,CACTC,OAAQ/B,EACRgC,mBAAoBzE,EAAQ+D,2BAG5BW,EAA8CN,EAA9CM,gBAAiBC,EAA6BP,EAA7BO,yBACzB3E,EAAQ4E,IAAMF,EACd1E,EAAQ6E,aAAeF,EACvB3E,EAAQ4E,IAAIE,iBAAiB,iBAAiB,WAC1C9E,EAAQ4E,IAAIpC,SACZ,IAAMuC,EAAS/E,EAAQ4E,IAAII,YACvBC,EAAUC,OAAO,QAAS,KAE1BD,EAAUC,OAAOC,QAAiC,KAEtD,IAAMC,EAAQL,EAAOM,MAAK,SAACC,GAAD,OAAYL,EAAQM,KAAKD,EAAEE,SACjDJ,GACApF,EAAQoF,MAAQA,EAChBlB,EAAS,eAETtD,QAAQ6E,MAAR,oDAA2DR,IAC3Df,EAAS,oBAKzB3E,GAAI,CACAG,UAAW,OACXgG,UAAW,SAGnBpG,KAAM,CACFC,GAAI,CACAoG,OAAQ,cACRC,MAAO,CACH/F,OAAQ,WACRC,QAASC,aAAO,SAACrB,EAAUgD,GAAY,MAAO,CAAEmE,UAAWnE,EAAM9C,aAI7EkH,YAAa,CACT1G,QAAS,UACT2G,KAAM,UACNxG,GAAI,CACAyG,UAAW,CACPlG,QAAS,CAAC,eACNC,aAAO,SAACrB,EAAUgD,GACd,MAAO,CACHzB,UAAWyB,EAAM9C,WAG7BiB,OAAQ,UAEZD,WAAY,OACZqG,OAAQ,OACRzG,MAAO,UAEXH,OAAQ,CACJ6G,QAAS,CACL7F,MAAO,CACH,WACA5B,EACI,CAAEE,KAAM,WACR,CAAEwH,MAAO,SAACnG,GAAD,OAAc,KAAQA,EAAQoG,cAjHlD,KAiHsFnF,GAAI,aAEvF1B,GAAI,CACAY,QAAS,oBACTkG,YAAa,cAEjBN,KAAMvD,EAAO,YAEjB8D,WAAY,GAEZC,MAAO,CACHlG,MAAO5B,EAAK,eAEhB+H,MAAO,CACHnG,MAAO,UACPd,GAAI,CAAEC,MAAO,cAIzBiH,SAAU,CACNpG,MAAO,WACPd,GAAI,CACAe,UAAW,OACX2F,OAAQ,OACRzG,MAAO,CAAEK,OAAQ,OAAQC,QAASrB,EAAK,eAE3CsH,KAAM,WAEVjE,KAAM,OAKlB,CACIhC,QAAS,CACL4G,aAAc,SAAC1G,GAEXY,QAAQC,IAAI,KAAMb,EAAQC,UAAU,GAAlB,UAAmCD,EAAQC,UAAU,GAAlB,aAEzD0G,UAAW,SAAC3G,GAERY,QAAQC,IAAI,kBAAoBb,EAAQ4G,QAAQC,OAAOrB,UAWjEsB,EAAiB,SAACC,GACpB,IAAIC,IAAeD,EAAME,MAAMjH,QAAQkH,qBAAuB,CAAC,KAC1D7B,MAAK,SAAC8B,GAAD,MAA8B,SAAjBA,EAAGC,cAAyB,IAAIxI,MACnDyI,IAAgBN,EAAME,MAAMjH,QAAQkH,qBAAuB,CAAC,KAC3D7B,MAAK,SAAC8B,GAAD,MAA8B,UAAjBA,EAAGC,cAA0B,IAAIxI,MACpD0I,EAAc,SAClB,QAAQ,GACJ,KAAKP,EAAME,MAAMM,QAAQ,CAAEvE,OAAQ,UAAa+D,EAAME,MAAMM,QAAQ,CAAExE,GAAI,SACtE,MACJ,KAAKgE,EAAME,MAAMM,QAAQ,CAAEvE,OAAQ,CAAE8C,YAAa,WAC9CkB,EAAa,oBACb,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAEvE,OAAQ,gBAC/BsE,EAAc,qBACdN,EAAaA,GAAc,eAC3B,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAEvE,OAAQ,aAC/BsE,EAAc,kBACdN,EAAaA,GAAc,cAC3B,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAExE,GAAI,SAI/B,KAAKgE,EAAME,MAAMM,QAAQ,CAAExE,GAAI,SAC3BiE,EAAa,kBACbM,EAAc,eACd,MACJ,QACIN,EAAaA,GAAc,OAEnC,OACI,sBAAKQ,UAAU,UAAf,UACI,wBAAQA,UAAU,SAAlB,SACKH,GACG,qBAAKnG,IAAKmG,EACNI,IAAKT,MAEjB,sBAAKQ,UAAU,SAAf,UACI,oCAAQ7I,KAAK,SAAS6I,UAAWF,EAC7BI,MAAO,IAAQX,IAEnB,qBAAKS,UAAU,cAAf,SACKR,WAMfW,EAAe,SAACZ,GAClB,IAAMa,EAAUb,EAAMc,YAAYxC,MAAK,SAAC8B,GAAD,MAA8B,SAAjBA,EAAGC,aAAsBxI,MACvEkJ,GAAYf,EAAMc,YAAYxC,MAAK,SAAC8B,GAAD,MAA8B,UAAjBA,EAAGC,cAA0B,IAAIxI,MACvF,OACI,iDAAQ4I,UAAU,QAAWT,GAA7B,cACKe,GACG,qBAAK5G,IAAK4G,EAAUL,IAAKG,IAC7B,qCAAaA,SAKzB,SAASG,IACL,MAAwBC,YAAWnF,EAAS,CACxCoF,UAAU,EACVnI,QAAS,CAELoI,aAAcC,aAAS,SAACnI,GACpBoI,SAASC,KAAKX,MAAMY,WAAatI,EAAQC,UAAU,GAAGC,aAI1DqI,SAAUJ,aAAS,SAACnI,GAChBA,EAAQwI,IAAIC,WAGhBC,QAASP,aAAS,SAACnI,GACfA,EAAQwI,IAAIG,WAGhBC,SAAUT,aAAS,SAACnI,GAChB,IAAME,EAAY,IAAIF,EAAQ6E,aAAa7E,EAAQ6F,WACnDjF,QAAQC,IAAI,KAAMb,EAAQ6F,WAC1B3F,EAAUkF,MAAQpF,EAAQoF,MAC1BlF,EAAU2I,MAAQ,kBAAMpK,EAAK,cAC7BuB,EAAQ4E,IAAIkE,MAAM5I,MAEtB6I,QAASZ,aAAS,SAACnI,GAEfA,EAAQ4E,IAAIpC,YAEhBwG,YAAab,aAAS,SAACnI,EAASiE,GAC5B,IACMgF,EACIC,IAAgC,CAC9B5E,aAActE,EAAQiD,SACtBsB,YAAa,CACTC,OAAQ/B,EACRgC,mBAAoBzE,EAAQ+D,2BALtCkF,kBAQNjJ,EAAQwI,IAAM,IAAIS,EAClBjJ,EAAQwI,IAAIW,KAAOhE,QACnBnF,EAAQwI,IAAIY,YAAa,EACzBpJ,EAAQwI,IAAIa,gBAAiB,EAC7BrJ,EAAQwI,IAAIc,SAAW,SAAS5H,GAC5B,IAAI6H,EAAS7H,EAAM8H,QAAQ,GACvBD,EAAOE,QACPhL,EAAK,CACDE,KAAM,YAAaC,MACf,CAAC,CACG,UAAa2K,EAAO,GAAGG,WACvB,WAAcH,EAAO,GAAGI,eAIpClL,EAAK,CAAEE,KAAM,uBArDjC,mBAAOiL,EAAP,KAAgBnL,EAAhB,KA4DMoL,GAAiBD,EAAQ5J,QAAQ8J,yBAA2B,IAAIC,QAAO,SAACC,GAAD,OAAYA,EAAEC,sBACtFC,KACG,SAACF,EAAQG,GAAT,OACI,cAAC,EAAD,CAAclD,MAAO2C,EACjB/B,YAAamC,EAAEC,mBAEfG,QAAS,kBAAM3L,EAAK,CAAEE,KAAM,SAAUC,MAAOoL,EAAEK,wBAD1CF,MAOb,OACI,sBAAK3C,UAAU,MAAf,UACI,cAAC,EAAD,CAAgBP,MAAO2C,EAAS/B,YAAa,GAAIuC,QAAS,kBAAM3L,EAAK,YACrE,qBAAK+I,UAAU,iBAAf,SACI,qBAAKA,UAAU,SAAf,SACKqC,SAS7B,IAAM/F,EAAwB,kBAC1B3C,MAAM,IAAIC,QAnUS,sEAmUe,CAC9BkJ,OAAQ,OACRC,QAAS,CACL,4BAA6BpF,uCAEjC9D,MAAK,SAAAC,GAAI,OAAIA,EAAK9C,WAGpBgM,EAAcpC,SAASqC,eAAe,QAC5CC,SACI,cAAC3C,EAAD,IACAyC,K","file":"static/js/main.8e06975f.chunk.js","sourcesContent":["/*\n    What can this DM It can fufill task 1 and partial task 2. The reason why it did not fullfill the task 2 is that I am confused about\n    how data input should be saved. I tried to understand the SDSContext interface and tried to save the data input there, but it was not\n    so sucessful. The flow of states are quite linear. I tried to create parallel and nested states, but it did not work.\n*/\n// import { title } from \"process\";\n// import { Context } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig\";\nimport { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string, userName?: string, famousPersonName?: string} } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    \"Monday\": { day: \"Monday\" },\n    \"10:30\": { time: \"10:30\" },\n    \"Jack\": {userName: \"Jack\"},\n    \"famousPerson\": {famousPersonName: \"Jackie Chan\"}\n}\n\n\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'welcome',\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'openning',\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].userName! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Tell me your name\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n            }\n        },\n        openning: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'Alone.'\n                    },\n                    {\n                        target: 'meetingWithOther',\n                        cond: (context) => context.recResult[0].utterance === 'Another'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Hi,\" + grammar[\"Jack\"].userName + \"Do you want to create a meeting alone or with another one?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        meetingWithOther: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'findPerson',\n                        actions: [assign({ famousPersonName: (context) => grammar[\"famousPerson\"].famousPersonName! }),\n                                    (context) => console.log(context.famousPersonName)]\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who is X?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n\n                }\n        },\n        findPerson: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: say(\"Here we go.\"),\n                    on: { ENDSPEECH: 'getPerson' }\n                },\n                getPerson: {\n                    invoke: {\n                        id: 'getPerson',\n                        src: (grammar) => kbRequest(grammar.famousPersonName),\n                        onDone: {\n                            target: 'success',\n                            actions: [\n                                assign({ personSpec: (context, event) => event.data.Abstract}),\n                                (context, event) => console.log(context, event),\n                                (grammar) => console.log(grammar.personSpec)\n                            ]\n                        },\n                        onError: {\n                            target: 'fail',\n                            actions: (context, event) => console.log(context, event)\n                        }\n                    }\n                },\n                success: {\n                    entry: send((context: SDSContext) => ({\n                        type: \"SPEAK\", value: context.personSpec\n                    })),\n                    on: { ENDSPEECH: '#root.dm.meetingFamousPerson' }\n                },\n                fail: {},\n            },\n        },\n        meetingFamousPerson:{\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'date',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.'\n\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Do you want to meet\" + grammar.famousPersonName),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        meetingWelcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'date',\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Let's create a meeting. What is it about?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        date:{\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'daypart',\n                        // cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: [assign({ title: (context) => grammar[context.recResult[0].utterance].day! }),\n                                (grammar) => console.log(grammar)]\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"On which day is it?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        daypart:{\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'gettime',\n                        cond: (context) => context.recResult[0].utterance === 'No.' \n                    },\n                    {\n                        target: 'meetingConfirmationWholeDay',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Will it take the whole day?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        gettime: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingConfirmationPartDay',\n                        // cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: [assign({ title: (context) => grammar[context.recResult[0].utterance].time! }),\n                                  (grammar) => console.log(grammar)]\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What time is your meeting?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        meetingConfirmationPartDay: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'finalConfirmation',\n                        // cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\n                        // actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\n                    },\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'No.'\n                    },\n                    {\n                        target: 'finalConfirmation',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Do you want to create a meeting titled\" + grammar[\"Lunch.\"].title + \"on\" + grammar[\"Monday\"].day + \"at\" + grammar[\"10:30\"].time + \"?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        meetingConfirmationWholeDay: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'finalConfirmation',\n                        // cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\n                        // actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\n                    },\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'No.'\n                    },\n                    {\n                        target: 'finalConfirmation',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Do you want to create a meeting titled\" + grammar[\"Lunch.\"].title + \"on\" + grammar[\"Monday\"].day + \"?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        finalConfirmation: {\n            entry: say(\"Your meeting has been created!\")\n        },\n        info: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `OK, ${context.title}`\n            })),\n            on: { ENDSPEECH: 'init' }\n        }\n    }\n})\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}