{"version":3,"sources":["dmHomeBot.ts","index.tsx"],"names":["say","text","send","_context","type","value","context","title","day","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","openning","entry","counter","RECOGNISED","target","actions","assign","userName","recResult","utterance","TIMEOUT","prompt","ENDSPEECH","ask","nomatch","welcome","cond","botServices","intentSwitch","id","getIntentRasa","invoke","src","fetch","Request","method","body","then","data","json","onDone","intent","event","name","onError","console","log","success","always","fail","hist","history","vacuum","jobFinished","after","dump_trash","turn_on_light","turn_off_light","info","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","RECSTOP","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","recLogResult","logIntent","nluData","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","background","recStart","asr","start","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.851fef95.chunk.js","sourcesContent":["\n/* \n    Intent recognition\n    The home bot will offer 4 services.\n*/\nimport { Context } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig\";\nimport { MachineConfig, send, Action, assign, createMachine } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    \"On Friday.\": { day: \"Friday\" },\n    \"At 10\": { time: \"10:00\" },\n}\n\nconst myGrammar = {services:['vacuum', 'dump_trash', 'turn_on_light', 'turn_off_light']}\n\nconst rasaurl = 'https://rasa-nlu-yw.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n  fetch(new Request(rasaurl, {\n      method: 'POST',\n      body: `{\"text\": \"${text}\"}`})).then(data => data.json())\n\nconst sayAppointment: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Do you want to create a meeting titled ${context.title} on ${context.day}`\n}))\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'openning',\n                CLICK: 'openning'\n            }\n        },\n        openning: {\n            initial: 'prompt',\n            entry: (context) => context.counter = 0,\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'welcome',\n                        actions: assign({ userName: (context) => context.recResult[0].utterance })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Tell me your name please.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n      \n        welcome: {\n            initial: 'prompt',\n            entry: (context) => context.counter = 0,\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'intentSwitch'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n               \n                TIMEOUT: [{target: '.prompt', cond: (context) => context.counter % 3 !== 0},\n                          {target: '.botServices', cond: (context) => context.counter % 3 === 0}]\n            },\n            states: {\n                prompt: {\n                    entry: [send((context: SDSContext) => ({\n                        type: \"SPEAK\", value: `Hi ${context.userName}. What can I do for you? `})),\n                        (context) => context.counter + 1],\n                    on: { ENDSPEECH: 'ask' }\n                },\n             \n                botServices: {\n                    entry: say('Here is a list of what I can do: vacuum, dump trash, turn on light, or turn off light.'),\n                    on: {ENDSPEECH: 'prompt'}\n                },\n               \n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        intentSwitch:{ \n            id: 'intentSwitch',\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: say(\"Let me check the inventory.\"),\n                    on: { ENDSPEECH: 'getIntentRasa' }\n                },\n                getIntentRasa: {\n                    id: 'getIntentRasa',\n                    invoke: {\n                        src: (context) => nluRequest(context.recResult[0].utterance),\n                        onDone: {\n                            target: 'success',\n                            actions: assign({ intent: (context, event) => event.data.intent.name}),     \n                        },\n                        onError: {\n                            target: 'fail',\n                            actions: (context, event) => console.log(context, event)\n                        }\n                    }\n                },\n                success: {\n                    always: [\n                        {\n                            target: '#root.dm.vacuum',\n                            cond: (context) => context.intent === 'vacuum'\n                        },\n                        {\n                            target: '#root.dm.dump_trash',\n                            cond: (context) => context.intent === 'move_to_trash'\n                        },\n                        {\n                            target: '#root.dm.turn_on_light',\n                            cond: (context) => context.intent === 'turn_on_light'\n                        },\n                        {\n                            target: '#root.dm.turn_off_light',\n                            cond: (context) => context.intent === 'turn_off_light'\n                        }\n                    ],\n                },\n                fail: {},\n                hist: {\n                    type: 'history',\n                    history: 'deep'\n                }\n            }             \n        },\n        vacuum:{ \n            initial: 'prompt',\n            on: {},\n            states:{\n                prompt: {\n                    entry: say(\"OK, start vacuuming\"),\n                    on: {ENDSPEECH: 'jobFinished'}\n                },\n                jobFinished: {\n                    entry: say(\"I am vacuuming and it will be fone in 1 second.\"),\n                    after: {\n                        1000: {target: '#root.dm.welcome'}\n                    }\n                }\n            }\n        },\n        dump_trash: {\n            initial: 'prompt',\n            on: {},\n            states:{\n                prompt: {\n                    entry: say(\"OK, start dumpping the trash\"),\n                    on: {ENDSPEECH: 'jobFinished'}\n                },\n                jobFinished: {\n                    entry: say(\"The trash is dumpped.\"),\n                    after: {\n                        500: {target: '#root.dm.welcome'}\n                    }\n                }\n            }\n        },\n        turn_on_light: {\n            initial: 'prompt',\n            on: {},\n            states:{\n                prompt: {\n                    entry: say(\"OK, trun on the light.\"),\n                    on: {ENDSPEECH: 'jobFinished'}\n                },\n                jobFinished: {\n                    entry: say(\"Now the light is on.\"),\n                    after: {\n                        500: {target: '#root.dm.welcome'}\n                    }\n                }\n            }\n        },\n        turn_off_light: {\n            initial: 'prompt',\n            on: {},\n            states:{\n                prompt: {\n                    entry: say(\"OK, turn off the light\"),\n                    on: {ENDSPEECH: 'jobFinished'}\n                },\n                jobFinished: {\n                    entry: say(\"Now the light is off.\"),\n                    after: {\n                        500: {target: '#root.dm.welcome'}\n                    }\n                }\n            }\n        },\n        info: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `OK, ${context.title}`\n            })),\n            on: { ENDSPEECH: 'init' }\n        }\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmHomeBot\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 3\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause',\n                        RECSTOP: 'idle'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}