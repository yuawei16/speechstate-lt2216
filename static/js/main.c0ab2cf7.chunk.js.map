{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","sayAppointment","context","title","day","grammar","time","userName","famousPersonName","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","RECOGNISED","target","actions","assign","recResult","utterance","console","log","TIMEOUT","prompt","entry","ENDSPEECH","ask","nomatch","openning","cond","meetingWithOther","findPerson","getPerson","invoke","id","src","fetch","Request","then","data","json","onDone","personSpec","event","Abstract","onError","success","fail","meetingFamousPerson","meetingWelcome","date","daypart","gettime","meetingConfirmationPartDay","meetingConfirmationWholeDay","finalConfirmation","info","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"+XAUA,SAASA,EAAIC,GACT,OAAOC,aAAK,SAACC,GAAD,MAA2B,CAAEC,KAAM,QAASC,MAAOJ,MAGnE,IAAMK,EAA+CJ,aAAK,SAACK,GAAD,MAA0B,CAChFH,KAAM,QAASC,MAAM,0CAAD,OAA4CE,EAAQC,MAApD,eAAgED,EAAQE,SAG1FC,EAA6H,CAC/H,WAAY,CAAEF,MAAO,4BACrB,SAAU,CAAEA,MAAO,wBACnB,iBAAoB,CAACA,MAAO,4BAC5B,OAAU,CAAEC,IAAK,UACjB,QAAS,CAAEE,KAAM,SACjB,KAAQ,CAACC,SAAU,QACnB,aAAgB,CAACC,iBAAkB,gBAQ1BC,EAAuD,CAChEC,QAAS,OACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,SAGfC,KAAM,CACFF,GAAI,CACAG,UAAW,UACXF,MAAO,YAGfG,QAAS,CACLP,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,WACRC,QAAS,CAACC,YAAO,CAAEd,SAAU,SAACL,GAAD,OAAaA,EAAQoB,UAAU,GAAGC,aACnD,SAACrB,GAAD,OAAasB,QAAQC,IAAI,sBAAuBvB,EAAQK,aAExE,CACIY,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAOjC,EAAI,qBACXkB,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7BG,SAAU,CACNtB,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,iBACRc,KAAM,SAAC/B,GAAD,MAAgD,WAAnCA,EAAQoB,UAAU,GAAGC,YAE5C,CACIJ,OAAQ,mBACRc,KAAM,SAAC/B,GAAD,MAAgD,iBAAnCA,EAAQoB,UAAU,GAAGC,YAE5C,CACIJ,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAO/B,aAAK,SAACK,GAAD,MAA0B,CAACH,KAAM,QAASC,MAAM,OAAD,OAASE,EAAQK,SAAjB,oEAC3DM,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7BK,iBAAkB,CACdxB,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,aACRC,QAAS,CAACC,YAAO,CAAEb,iBAAkB,SAACN,GAAD,OAAaA,EAAQoB,UAAU,GAAGC,aAC3D,SAACrB,GAAD,OAAasB,QAAQC,IAAIvB,EAAQM,qBAEjD,CACIW,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAOjC,EAAI,aACXkB,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAK7BM,WAAY,CACRzB,QAAS,SACTC,OAAQ,CACJgB,OAAQ,CACJC,MAAOjC,EAAI,iBACXkB,GAAI,CAAEgB,UAAW,cAErBO,UAAW,CACPC,OAAQ,CACJC,GAAI,YACJC,IAAK,SAACrC,GAAD,OAtHVN,EAsHiCM,EAAQM,iBArHxDgC,MAAM,IAAIC,QAAJ,4DAAiE7C,EAAjE,kCAAsG8C,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UADhH,IAAChD,GAuHKiD,OAAQ,CACJ1B,OAAQ,UACRC,QAAS,CACLC,YAAO,CAAEyB,WAAY,SAAC5C,EAAS6C,GAAV,OAAoBA,EAAMJ,KAAKK,YACpD,SAAC9C,EAAS6C,GAAV,OAAoBvB,QAAQC,IAAIvB,EAAS6C,IACzC,SAAC1C,GAAD,OAAamB,QAAQC,IAAIpB,EAAQyC,eAGzCG,QAAS,CACL9B,OAAQ,OACRC,QAAS,SAAClB,EAAS6C,GAAV,OAAoBvB,QAAQC,IAAIvB,EAAS6C,OAI9DG,QAAS,CACLtB,MAAO/B,aAAK,SAACK,GAAD,MAA0B,CAClCH,KAAM,QAASC,MAAOE,EAAQ4C,eAElCjC,GAAI,CAAEgB,UAAW,iCAErBsB,KAAM,KAGdC,oBAAoB,CAChB1C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,OACRc,KAAM,SAAC/B,GAAD,MAAgD,SAAnCA,EAAQoB,UAAU,GAAGC,WACxCH,QAAS,CAACC,YAAO,CAAElB,MAAO,SAACD,GAAD,MAAa,eAAiBA,EAAQM,oBACpD,SAACN,GAAD,OAAasB,QAAQC,IAAIvB,EAAQC,UAGjD,CACIgB,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAO/B,aAAK,SAACK,GAAD,MAA0B,CAACH,KAAM,QAASC,MAAM,uBAAD,OAAyBE,EAAQM,iBAAjC,SAC3DK,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7BwB,eAAgB,CACZ3C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,OACRc,KAAM,SAAC/B,GAAD,MAAa,UAAYG,EAAQH,EAAQoB,UAAU,GAAGC,YAAc,KAC1EH,QAASC,YAAO,CAAElB,MAAO,SAACD,GAAD,OAAaG,EAAQH,EAAQoB,UAAU,GAAGC,WAAWpB,UAElF,CACIgB,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAOjC,EAAI,6CACXkB,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7ByB,KAAK,CACD5C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,UACRC,QAAS,CAACC,YAAO,CAAEjB,IAAK,SAACF,GAAD,OAAaG,EAAQH,EAAQoB,UAAU,GAAGC,WAAWnB,OACrE,SAACF,GAAD,OAAasB,QAAQC,IAAI,YAAavB,MAElD,CACIiB,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAOjC,EAAI,uBACXkB,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7B0B,QAAQ,CACJ7C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,UACRc,KAAM,SAAC/B,GAAD,MAAgD,QAAnCA,EAAQoB,UAAU,GAAGC,YAE5C,CACIJ,OAAQ,8BACRc,KAAM,SAAC/B,GAAD,MAAgD,SAAnCA,EAAQoB,UAAU,GAAGC,YAE5C,CACIJ,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAOjC,EAAI,+BACXkB,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7B2B,QAAS,CACL9C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,6BACRC,QAAS,CAACC,YAAO,CAAElB,MAAO,SAACD,GAAD,OAAaG,EAAQH,EAAQoB,UAAU,GAAGC,WAAWjB,QACrE,SAACD,GAAD,OAAamB,QAAQC,IAAIpB,MAEvC,CACIc,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAOjC,EAAI,8BACXkB,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7B4B,2BAA4B,CACxB/C,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,iBACRc,KAAM,SAAC/B,GAAD,MAAgD,QAAnCA,EAAQoB,UAAU,GAAGC,YAE5C,CACIJ,OAAQ,oBACRc,KAAM,SAAC/B,GAAD,MAAgD,SAAnCA,EAAQoB,UAAU,GAAGC,YAE5C,CACIJ,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAOjC,EAAI,0CAA4CU,EAAQ,UAAUF,MAC5D,MAAQE,EAAO,OAAWD,IAAM,MAAQC,EAAQ,SAASC,KAAO,KAC7EO,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7B6B,4BAA6B,CACzBhD,QAAS,SACTG,GAAI,CACAK,WAAY,CACR,CACIC,OAAQ,iBACRc,KAAM,SAAC/B,GAAD,MAAgD,QAAnCA,EAAQoB,UAAU,GAAGC,YAE5C,CACIJ,OAAQ,oBACRc,KAAM,SAAC/B,GAAD,MAAgD,SAAnCA,EAAQoB,UAAU,GAAGC,YAE5C,CACIJ,OAAQ,aAGhBO,QAAS,WAEbf,OAAQ,CACJgB,OAAQ,CACJC,MAAO3B,EACPY,GAAI,CAAEgB,UAAW,QAErBC,IAAK,CACDF,MAAO/B,YAAK,WAEhBkC,QAAS,CACLH,MAAOjC,EAAI,6DACXkB,GAAI,CAAEgB,UAAW,UAI7B8B,kBAAmB,CACf/B,MAAOjC,EAAI,mCAEfiE,KAAM,CACFhC,MAAO/B,aAAK,SAACK,GAAD,MAAc,CACtBH,KAAM,QACNC,MAAM,OAAD,OAASE,EAAQC,WAE1BU,GAAI,CAAEgB,UAAW,W,4CC/XrBhC,EAAiBuB,IAAjBvB,KAAMgE,EAAWzC,IAAXyC,OAGRC,EAAS,cAEfC,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAIZ,IAEMC,EAAUC,YAAmC,CAC/C7B,GAAI,OACJvC,KAAM,WACNY,OAAQ,CACJyD,GAAG,eACI3D,GAGP4D,OAAQ,CACJ3D,QAAS,OACTC,OAAQ,CACJI,KAAM,CACFF,GAAI,CACAC,MAAO,CACHK,OAAQ,WACRC,QAAS,CACLC,YAAO,CACHiD,SAAU,SAACC,GAAD,OACN,IAAMC,OAAeC,cAAiBD,OAAeE,uBAE7D,SAACxE,GAAD,OACIyE,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IACxCpC,MAAK,SAASqC,GAAU7E,EAAQoE,SAASU,wBAAwBD,WAK1FE,SAAU,CACN5C,OAAQ,CACJC,GAAI,wBACJC,IAAK,SAACgC,EAAMW,GAAP,OAAgBC,KACrBtC,OAAQ,CACJzB,QAAS,CACLC,aAAO,SAACvB,EAAUiD,GAAY,MAAO,CAAEqC,wBAAyBrC,EAAMJ,SACtE,eACJxB,OAAQ,eAEZ8B,QAAS,CACL9B,OAAQ,UAIpBkE,YAAa,CACThD,OAAQ,CACJC,GAAI,UACJC,IAAK,SAACrC,EAASoF,GAAV,OAAqB,SAACC,EAAUC,GACjC,IAAMC,EAAWC,IAA8B,CAC3CC,aAAczF,EAAQoE,SACtBsB,YAAa,CACTC,OAAQ/B,EACRgC,mBAAoB5F,EAAQkF,2BAG5BW,EAA8CN,EAA9CM,gBAAiBC,EAA6BP,EAA7BO,yBACzB9F,EAAQ+F,IAAMF,EACd7F,EAAQgG,aAAeF,EACvB9F,EAAQ+F,IAAIE,iBAAiB,iBAAiB,WAC1CjG,EAAQ+F,IAAIpC,SACZ,IAAMuC,EAASlG,EAAQ+F,IAAII,YACvBC,EAAUC,OAAO,QAAS,KAE1BD,EAAUC,OAAOC,QAAiC,KAEtD,IAAMC,EAAQL,EAAOM,MAAK,SAACC,GAAD,OAAYL,EAAQM,KAAKD,EAAEE,SACjDJ,GACAvG,EAAQuG,MAAQA,EAChBlB,EAAS,eAET/D,QAAQsF,MAAR,oDAA2DR,IAC3Df,EAAS,oBAKzB1E,GAAI,CACAG,UAAW,OACX+F,UAAW,SAGnBnG,KAAM,CACFC,GAAI,CACAmG,OAAQ,cACRC,MAAO,CACH9F,OAAQ,WACRC,QAASC,aAAO,SAACvB,EAAUiD,GAAY,MAAO,CAAEmE,UAAWnE,EAAM/C,aAI7EmH,YAAa,CACTzG,QAAS,UACT0G,KAAM,UACNvG,GAAI,CACAwG,UAAW,CACPjG,QAAS,CAAC,eACNC,aAAO,SAACvB,EAAUiD,GACd,MAAO,CACHzB,UAAWyB,EAAM/C,WAG7BmB,OAAQ,UAEZD,WAAY,OACZoG,OAAQ,OACRxG,MAAO,UAEXH,OAAQ,CACJ4G,QAAS,CACL3F,MAAO,CACH,WACA/B,EACI,CAAEE,KAAM,WACR,CAAEyH,MAAO,SAACtH,GAAD,OAAc,KAAQA,EAAQuH,cAjHlD,KAiHsFnF,GAAI,aAEvFzB,GAAI,CACAa,QAAS,oBACTgG,YAAa,cAEjBN,KAAMvD,EAAO,YAEjB8D,WAAY,GAEZC,MAAO,CACHhG,MAAO/B,EAAK,eAEhBgI,MAAO,CACHjG,MAAO,UACPf,GAAI,CAAEC,MAAO,cAIzBgH,SAAU,CACNlG,MAAO,WACPf,GAAI,CACAgB,UAAW,OACXyF,OAAQ,OACRxG,MAAO,CAAEK,OAAQ,OAAQC,QAASvB,EAAK,eAE3CuH,KAAM,WAEVjE,KAAM,OAKlB,CACI/B,QAAS,CACL2G,aAAc,SAAC7H,GAEXsB,QAAQC,IAAI,KAAMvB,EAAQoB,UAAU,GAAlB,UAAmCpB,EAAQoB,UAAU,GAAlB,aAEzD0G,UAAW,SAAC9H,GAERsB,QAAQC,IAAI,kBAAoBvB,EAAQ+H,QAAQC,OAAOrB,UAWjEsB,EAAiB,SAACC,GACpB,IAAIC,IAAeD,EAAME,MAAMpI,QAAQqI,qBAAuB,CAAC,KAC1D7B,MAAK,SAAC8B,GAAD,MAA8B,SAAjBA,EAAGC,cAAyB,IAAIzI,MACnD0I,IAAgBN,EAAME,MAAMpI,QAAQqI,qBAAuB,CAAC,KAC3D7B,MAAK,SAAC8B,GAAD,MAA8B,UAAjBA,EAAGC,cAA0B,IAAIzI,MACpD2I,EAAc,SAClB,QAAQ,GACJ,KAAKP,EAAME,MAAMM,QAAQ,CAAEvE,OAAQ,UAAa+D,EAAME,MAAMM,QAAQ,CAAExE,GAAI,SACtE,MACJ,KAAKgE,EAAME,MAAMM,QAAQ,CAAEvE,OAAQ,CAAE8C,YAAa,WAC9CkB,EAAa,oBACb,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAEvE,OAAQ,gBAC/BsE,EAAc,qBACdN,EAAaA,GAAc,eAC3B,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAEvE,OAAQ,aAC/BsE,EAAc,kBACdN,EAAaA,GAAc,cAC3B,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAExE,GAAI,SAI/B,KAAKgE,EAAME,MAAMM,QAAQ,CAAExE,GAAI,SAC3BiE,EAAa,kBACbM,EAAc,eACd,MACJ,QACIN,EAAaA,GAAc,OAEnC,OACI,sBAAKQ,UAAU,UAAf,UACI,wBAAQA,UAAU,SAAlB,SACKH,GACG,qBAAKnG,IAAKmG,EACNI,IAAKT,MAEjB,sBAAKQ,UAAU,SAAf,UACI,oCAAQ9I,KAAK,SAAS8I,UAAWF,EAC7BI,MAAO,IAAQX,IAEnB,qBAAKS,UAAU,cAAf,SACKR,WAMfW,EAAe,SAACZ,GAClB,IAAMa,EAAUb,EAAMc,YAAYxC,MAAK,SAAC8B,GAAD,MAA8B,SAAjBA,EAAGC,aAAsBzI,MACvEmJ,GAAYf,EAAMc,YAAYxC,MAAK,SAAC8B,GAAD,MAA8B,UAAjBA,EAAGC,cAA0B,IAAIzI,MACvF,OACI,iDAAQ6I,UAAU,QAAWT,GAA7B,cACKe,GACG,qBAAK5G,IAAK4G,EAAUL,IAAKG,IAC7B,qCAAaA,SAKzB,SAASG,IACL,MAAwBC,YAAWnF,EAAS,CACxCoF,UAAU,EACVlI,QAAS,CAELmI,aAAcC,aAAS,SAACtJ,GACpBuJ,SAASC,KAAKX,MAAMY,WAAazJ,EAAQoB,UAAU,GAAGC,aAI1DqI,SAAUJ,aAAS,SAACtJ,GAChBA,EAAQ2J,IAAIC,WAGhBC,QAASP,aAAS,SAACtJ,GACfA,EAAQ2J,IAAIG,WAGhBC,SAAUT,aAAS,SAACtJ,GAChB,IAAIgK,EAAO,oJAAgJhK,EAAQuG,MAAMI,KAA9J,MACXqD,GAAqB1D,+QAAY2D,sBAAZ,wBAAqD3D,+QAAY2D,sBAAjE,OAA8F,GACnHD,GAAiB,UAAMhK,EAAQgH,UAAd,oBACjB1F,QAAQ4I,MAAMF,GACd,IAAM3I,EAAY,IAAIrB,EAAQgG,aAAagE,GAC3C1I,QAAQC,IAAI,KAAMvB,EAAQgH,WAC1B3F,EAAUkF,MAAQvG,EAAQuG,MAC1BlF,EAAU8I,MAAQ,kBAAMxK,EAAK,cAC7BK,EAAQ+F,IAAIqE,MAAM/I,MAEtBgJ,QAASf,aAAS,SAACtJ,GAEfA,EAAQ+F,IAAIpC,YAEhB2G,YAAahB,aAAS,SAACtJ,EAASoF,GAC5B,IACMmF,EACIC,IAAgC,CAC9B/E,aAAczF,EAAQoE,SACtBsB,YAAa,CACTC,OAAQ/B,EACRgC,mBAAoB5F,EAAQkF,2BALtCqF,kBAQNvK,EAAQ2J,IAAM,IAAIY,EAClBvK,EAAQ2J,IAAIc,KAAOnE,QACnBtG,EAAQ2J,IAAIe,YAAa,EACzB1K,EAAQ2J,IAAIgB,gBAAiB,EAC7B3K,EAAQ2J,IAAIiB,SAAW,SAAS/H,GAC5B,IAAIgI,EAAShI,EAAMiI,QAAQ,GACvBD,EAAOE,QACPpL,EAAK,CACDE,KAAM,YAAaC,MACf,CAAC,CACG,UAAa+K,EAAO,GAAGG,WACvB,WAAcH,EAAO,GAAGI,eAIpCtL,EAAK,CAAEE,KAAM,uBAzDjC,mBAAOqL,EAAP,KAAgBvL,EAAhB,KAgEMwL,GAAiBD,EAAQlL,QAAQoL,yBAA2B,IAAIC,QAAO,SAACC,GAAD,OAAYA,EAAEC,sBACtFC,KACG,SAACF,EAAQG,GAAT,OACI,cAAC,EAAD,CAAcrD,MAAO8C,EACjBlC,YAAasC,EAAEC,mBAEfG,QAAS,kBAAM/L,EAAK,CAAEE,KAAM,SAAUC,MAAOwL,EAAEK,wBAD1CF,MAOb,OACI,sBAAK9C,UAAU,MAAf,UACI,cAAC,EAAD,CAAgBP,MAAO8C,EAASlC,YAAa,GAAI0C,QAAS,kBAAM/L,EAAK,YACrE,qBAAKgJ,UAAU,iBAAf,SACI,qBAAKA,UAAU,SAAf,SACKwC,SAS7B,IAAMlG,EAAwB,kBAC1B3C,MAAM,IAAIC,QAvUS,sEAuUe,CAC9BqJ,OAAQ,OACRC,QAAS,CACL,4BAA6BvF,uCAEjC9D,MAAK,SAAAC,GAAI,OAAIA,EAAK/C,WAGpBoM,EAAcvC,SAASwC,eAAe,QAC5CC,SACI,cAAC9C,EAAD,IACA4C,K","file":"static/js/main.c0ab2cf7.chunk.js","sourcesContent":["/*\n    What can this DM It can fufill task 1 and partial task 2. The reason why it did not fullfill the task 2 is that I am confused about\n    how data input should be saved. I tried to understand the SDSContext interface and tried to save the data input there, but it was not\n    so sucessful. The flow of states are quite linear. I tried to create parallel and nested states, but it did not work.\n*/\n// import { title } from \"process\";\n// import { Context } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig\";\nimport { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst sayAppointment: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Do you want to create a meeting titled ${context.title} on ${context.day}`\n}))\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string, userName?: string, famousPersonName?: string} } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    \"CelebrityMetting\": {title: \"Meeting with Jackie Chan\"},\n    \"Monday\": { day: \"Monday\" },\n    \"10:30\": { time: \"10:30\" },\n    \"Jack\": {userName: \"Jack\"},\n    \"famousPerson\": {famousPersonName: \"Jackie Chan\"}\n}\n\n\n\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'welcome',\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'openning',\n                        actions: [assign({ userName: (context) => context.recResult[0].utterance}),\n                                    (context) => console.log(\"Here's the userName\", context.userName)]\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Tell me your name\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n            }\n        },\n        openning: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'Alone.'\n                    },\n                    {\n                        target: 'meetingWithOther',\n                        cond: (context) => context.recResult[0].utterance === 'Another one.'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context: SDSContext) => ({type: \"SPEAK\", value: `Hi, ${context.userName}! Do you want to create a meeting alone or with another one?`})),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        meetingWithOther: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'findPerson',\n                        actions: [assign({ famousPersonName: (context) => context.recResult[0].utterance }),\n                                    (context) => console.log(context.famousPersonName)]\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who is X?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n\n                }\n        },\n        findPerson: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: say(\"Let me check.\"),\n                    on: { ENDSPEECH: 'getPerson' }\n                },\n                getPerson: {\n                    invoke: {\n                        id: 'getPerson',\n                        src: (context) => kbRequest(context.famousPersonName),\n                        onDone: {\n                            target: 'success',\n                            actions: [\n                                assign({ personSpec: (context, event) => event.data.Abstract}),\n                                (context, event) => console.log(context, event),\n                                (grammar) => console.log(grammar.personSpec)\n                            ]\n                        },\n                        onError: {\n                            target: 'fail',\n                            actions: (context, event) => console.log(context, event)\n                        }\n                    }\n                },\n                success: {\n                    entry: send((context: SDSContext) => ({\n                        type: \"SPEAK\", value: context.personSpec\n                    })),\n                    on: { ENDSPEECH: '#root.dm.meetingFamousPerson' }\n                },\n                fail: {},\n            },\n        },\n        meetingFamousPerson:{\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'date',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.',\n                        actions: [assign({ title: (context) => \"meeting with\" + context.famousPersonName} ),\n                                    (context) => console.log(context.title)]\n\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context: SDSContext) => ({type: \"SPEAK\", value: `Do you want to meet ${context.famousPersonName}?`})),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        meetingWelcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'date',\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Let's create a meeting. What is it about?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        date:{\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'daypart',\n                        actions: [assign({ day: (context) => grammar[context.recResult[0].utterance].day! }),\n                                (context) => console.log(\"Date Step\", context)]\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"On which day is it?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        daypart:{\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'gettime',\n                        cond: (context) => context.recResult[0].utterance === 'No.' \n                    },\n                    {\n                        target: 'meetingConfirmationWholeDay',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Will it take the whole day?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        gettime: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingConfirmationPartDay',\n                        actions: [assign({ title: (context) => grammar[context.recResult[0].utterance].time! }),\n                                  (grammar) => console.log(grammar)]\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What time is your meeting?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        meetingConfirmationPartDay: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'No.'\n                    },\n                    {\n                        target: 'finalConfirmation',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.'\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Do you want to create a meeting titled \" + grammar[\"Lunch.\"].title\n                               + \"on \" + grammar[\"Monday\"].day + \"at \" + grammar[\"10:30\"].time + \"?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        meetingConfirmationWholeDay: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'meetingWelcome',\n                        cond: (context) => context.recResult[0].utterance === 'No.'\n                    },\n                    {\n                        target: 'finalConfirmation',\n                        cond: (context) => context.recResult[0].utterance === 'Yes.',\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: sayAppointment,\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        finalConfirmation: {\n            entry: say(\"Your meeting has been created!\")\n        },\n        info: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `OK, ${context.title}`\n            })),\n            on: { ENDSPEECH: 'init' }\n        }\n    }\n})\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}