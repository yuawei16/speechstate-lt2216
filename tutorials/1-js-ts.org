* Programming environment
You will be learning many technologies through this
course. Programming languages such as JavaScript,
TypeScript. Standards such as SSML, SRGS, SCXML (as implimented in
xstate library). And also, if time permits, a bit of VoiceXML and
React.

Prerequisites: 
- NodeJS :: [[https://nodejs.org/en/download/][download and install NodeJS]] (the LTS version)
- Text editor :: your editor of choice (e.g. Emacs or VS Code)
- Github account :: you need to have one, and also know at least a
  little bit about git.

Course repo: https://github.com/GU-CLASP/speechstate-lt2216  

  
* System architecture
** Spoken dialogue system architecture
[[./img/sds.png]]

** Motivation
1. Many systems on the market are proprietary: the code is either not
   available (DialogueFlow) or one need to look how things are
   actually implemented in the code (not in the documentation) RASA.
2. In the past (before 2020) we used VoiceXML, and in 2020 we used
   RASA. VoiceXML was great for dialogue management, because it was
   very transparent: it is a standard specifically built for voice
   applications.
3. This year we will be using state charts, which are standardised
   (SCXML) and very flexible. We will employ the JavaScript
   implementation of SCXML --- *xstate*.
4. The platform that we used in the past for VoiceXML --- Voxeo ---
   had some terrible speech recognition and synthesis and one needed
   to dial a phone number to talk to the system. This year everything
   will work in your browser.
5. The browser-based architecture is flexible. In future you can use
   visual modality, even virtual reality (WebXR). 

** Demo
** Caveats
You will need to learn JavaScript and its superset ---
TypeScript. Why? Because of the browser. And because of xstate.
   - It is not hard, you already know some fundamentals of Python. And
     you will only need fundamentals in this course.
   - It is very useful, because it is a new way of thinking. You’ll
     become a better programmer.
* Get started with JavaScript
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide

** Run the browser
- Web Console (Ctrl-Shift-I or Cmd-Option-K)
- Multi-line input (Ctrl/Cmd-B)

** HTML and JS

~index.html~
#+begin_src html
<html><body><pre><script src="program.js"></script></pre></body></html>
#+end_src

~program.js~
#+begin_src js
document.writeln('Hello, world!');
#+end_src

** Basics
*** Grammar
- comments: ~//~ (or ~/*  */~)
- reserved words can’t be used as variables or even object properties
  #+begin_example
  abstract
  boolean break byte
  case catch char class const continue
  debugger default delete do double
  else enum export extends
  false final finally float for function
  goto
  if implements import in instanceof int interface
  long
  native new null
  package private protected public
  return
  short static super switch synchronized
  this throw throws transient true try typeof
  var volatile void
  while with
  #+end_example
- no integers, 1 is the same as 1.0
- ~NaN~ or "not a number". ~NaN~ is not equal to any value, including
  itself. You can check it with the function ~isNaN(n)~
  #+begin_src js
    parseInt("bla")
  #+end_src
- Strings. No character type.
  #+begin_example
  'j' + 's' === 'js'
  'js'.toUpperCase() === 'JS'
  #+end_example
- Identation does not matter. So JS needs some brackets
  ("blocks"). For example, if:
  #+begin_src js
    if (expression) {
      statement1;
      statement2;
    } else {
      statement3;
    }
  #+end_src
*** Falsity
Falsy values:
- ~false~
- ~null~
- ~undefined~
- ~""~, ~0~ and ~NaN~

All the rest are *true*.  
*** Equality
#+begin_src js
2 * 2 === 4
2 * 2 !== 5
#+end_src
*** Trenary ~if~
~C ? T : F~
If C is true, then T. Else F.
*** Objects
- Object literals
  #+begin_src js
    const simpleGrammar = {
        "I want big pizza with zuccini": {
            size: "L",
            topping: "zuccini"
        },
        "I want a small pizza": {
            size: "S",
        }
    };
  #+end_src
- Retrieval: ~const size = pizza.size || "unknown";~ (undefined and TypeError)
- Update (objects are mutable!)
- Objects are passed by reference!
- Prototype object: ~var another_pizza =
  Object.create(pizza)~. Delegation & prototype
  chain. ~.hasOwnProperty()~ method.
- Delete. Does not touch any object in prototype linkage!
*** functions
Functions are also objects. You can define function in place:
#+begin_src js
    const add = function (a, b) {
        return a + b;
    };

  // or
const add = (a,b) => { return a + b }
#+end_src


Function can be a property of an object. We call it a /method/.
#+begin_src js
      let myObject = {
          value: 0,
          increment: function (inc) {
              this.value += typeof inc === 'number' ? inc : 1;
          }
      }

  // these are the same
  myObject["increment"]()
  myObject.increment()
#+end_src

Lambda:

*** arrays
Arrays can contain a mixture of value types.
#+begin_src js
const numbers = [
        'zero', 1, 'two', 3, 'four',
    ];
#+end_src

#+begin_src js
  let i;
  for (i = 0; i < numbers.length; i += 1) {
      document.writeln(numbers[i]);
  }

  // fix me!
  for (n in numbers) {
      document.writeln(n);
  }

#+end_src
*** Scoping: ~var~, ~let~ and ~const~
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
*** NodeJS
Node.js is a cross-platform JavaScript runtime environment that allows
developers to build server-side and network applications with
JavaScript.
*** Overall...
JavaScript is nice!

Douglas Crockford for /Beautiful Code/ (O’Reilly):
#+begin_quote
/Functions as first class objects/: functions in Simplified JavaScript
are lambdas with lexical scoping.

/Dynamic objects with prototypal inheritance/: Objects are
class-free. We can add a new member to any object by ordinary assign-
ment. An object can inherit members from another object.

/Object literals and array literals/. This is a very convenient notation
for creating new objects and arrays. JavaScript literals were the
inspiration for the JSON data interchange format.
#+end_quote

* Get started with TypeScript
https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html
** Minimal environment
Init and install typescript.
#+begin_src
npm init
npm install typescript --save-dev
#+end_src

Compile JavaScript from TypeScript
#+begin_src
npx tsc index.ts
#+end_src

** Very basics

*** Type inference

*** Defining types
Basic types:
- string
- number
- boolean
- undefined
- array
- function
  
#+begin_src js
const user = {
  name: "Hayes",
  id: 0,
};
#+end_src

#+begin_src js
interface User {
  name: string;
  id: number;
}
#+end_src

*** Composing types (union types)
#+begin_src js
function getLength(obj: string | string[]) {
  return obj.length;
}
#+end_src
*** Generics
#+begin_src js
type StringArray = Array<string>;
#+end_src
*** Type assertions
#+begin_src js
export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({})
#+end_src
*** More
- ~any~
- ~?~
- ~!~
- types instead of classes: ~Hypothesis~
*** Exercise?

** Learning resources
- https://www.typescriptlang.org/docs/handbook/intro.html
- [[https://www.youtube.com/watch?v=BwuLxPH8IDs][(YouTube) TypeScript Course for Beginners 2020 - Learn TypeScript from Scratch!]]

* Get started with state charts
https://xstate.js.org/docs/about/concepts.html#finite-state-machines

Hierarchical and orthogonal state charts
* Networking
- https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works
- https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview

* Under the hood
Let’s take a quick look at how it works under the hood
